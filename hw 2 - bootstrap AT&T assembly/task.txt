http://laredo-13.mit.edu/~brendan/cs3224/spring16/hw2/hw2.html

Homework: Guessing Game
Write an x86 boot sector that implements a simple guessing game. You should ask the user for a number from 0 to 9, read their response, and then tell them if they got it right or wrong. If they got it right, print a success message and then loop forever.

What number am I thinking of (0-9)? 4
Wrong!
What number am I thinking of (0-9)? 9
Wrong!
What number am I thinking of (0-9)? 2
Wrong!
What number am I thinking of (0-9)? 5
Right! Congratulations.
Hints:

Go back and look through the slides for Lecture 3 (assembly) to get a summary of the various x86 instructions. If you want more details on any of them, you can consult the Intel Architecture manual Volume 2a and Volume 2b. Remember that the instructions listed in the manual will be in Intel syntax, whereas gas wants AT&T syntax. The major differences are described here.

You will need some way of generating a random number. One way to do this is to just use the seconds portion of the current time. This is accessible through a standard PC peripheral called the CMOS RTC (Real Time Clock). You can read in detail about how to interact with it here. Access to the CMOS is done through Port I/O (specifically, ports 0x70 and 0x71); recall from class that this uses the x86 in and out instructions. Of course, seconds range from 0-59 and you want a number from 0-9, so you'll have to find some way to scale the result into something in the right range.

You will need some way of getting input from the user. We have already seen how to use a BIOS interrupt to write out a character. Another BIOS interrupt (int 0x16) will read a single character from the user when AH is set to 0 and store the ASCII value of the result in AL. You can read more details about this BIOS function here. There is also a very large list of BIOS functions available.

Writing a carriage return (ASCII 0x0d) will move the cursor to the beginning of the line. Writing a line feed (ASCII 0x0a) will move the cursor down one row.

You can make QEMU give you more information by turning on its debug output with the -d flag. Use -d ? to find out what debugging options are available. You can also put the debug log into a file with -D debuglog.txt.

You will probably want to use gdb to help debug your code. QEMU supports debugging the code it's running using gdb with the -s flag. You will also want to use the -S flag (note the capitalization) to make QEMU wait until you type continue in gdb before it starts executing. So run QEMU as:

$ qemu-system-i386 -hda guess -s -S
Then in another terminal window you can start gdb and attach it to QEMU:

$ gdb
GNU gdb (GDB) 7.8.1
Copyright (C) 2014 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-apple-darwin14.0.0".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
<http://www.gnu.org/software/gdb/documentation/>.
For help, type "help".
Type "apropos word" to search for commands related to "word".
(gdb) target remote localhost:1234
Remote debugging using localhost:1234
0x0000fff0 in ?? ()
(gdb) set architecture i8086 
The target architecture is assumed to be i8086
(gdb) break *0x7c00
Breakpoint 1 at 0x7c00
(gdb) continue
Breakpoint 1, 0x00007c00 in ?? ()
(gdb) x/3i 0x7c00
=> 0x7c00:  mov    $0x0,%ah
   0x7c02:  mov    $0x3,%al
   0x7c04:  int    $0x10
Note the use of the target remote localhost:1234 command to connect to QEMU, followed by set architecture i8086 to tell gdb that you're in 16-bit mode, and finally break *0x7c00 to make gdb stop when you reach your boot sector code.

If you need a refresher on gdb commands, you can check the cheat sheet or read a gdb tutorial. It is well worth your time to learn how to use gdb.

Submit a commented assembly file named guess.s that assembles to a 512-byte boot sector. The boot sector should be able to run in QEMU with the command line:

$ qemu-system-i386 -hda guess