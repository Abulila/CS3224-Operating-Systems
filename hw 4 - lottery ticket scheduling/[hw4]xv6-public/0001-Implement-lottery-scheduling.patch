From d5d6577712d92b299e9e97f0c1911e539391e88d Mon Sep 17 00:00:00 2001
From: Warlon Zeng <wz634@nyu.edu>
Date: Thu, 10 Mar 2016 23:30:16 -0500
Subject: [PATCH] Implement lottery scheduling

---
 Makefile      |   7 +-
 console.c     |  17 +++
 defs.h        |   1 +
 hackbench.c   | 324 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 lapic.c       |  14 +++
 lotterytest.c |  43 ++++++++
 printf.c      |  17 +++
 proc.c        |  75 +++++++++++---
 proc.h        |   4 +-
 rand.c        | 120 ++++++++++++++++++++++
 rand.h        |   3 +
 syscall.c     |   6 +-
 syscall.h     |   2 +
 sysproc.c     |  25 ++++-
 user.h        |   2 +
 usys.S        |   2 +
 x86.h         |   7 ++
 17 files changed, 650 insertions(+), 19 deletions(-)
 create mode 100644 hackbench.c
 create mode 100644 lotterytest.c
 create mode 100644 rand.c
 create mode 100644 rand.h

diff --git a/Makefile b/Makefile
index b4fd9a2..15c803a 100644
--- a/Makefile
+++ b/Makefile
@@ -26,13 +26,14 @@ OBJS = \
 	trap.o\
 	uart.o\
 	vectors.o\
+	rand.o\
 	vm.o\
 
 # Cross-compiling (e.g., on Mac OS X)
 # TOOLPREFIX = i386-jos-elf
 
 # Using native tools (e.g., on X86 Linux)
-#TOOLPREFIX = 
+#TOOLPREFIX =
 
 # Try to infer the correct TOOLPREFIX if not set
 ifndef TOOLPREFIX
@@ -172,13 +173,15 @@ UPROGS=\
 	_usertests\
 	_wc\
 	_zombie\
+	_hackbench\
+	_lotterytest\
 
 fs.img: mkfs README $(UPROGS)
 	./mkfs fs.img README $(UPROGS)
 
 -include *.d
 
-clean: 
+clean:
 	rm -f *.tex *.dvi *.idx *.aux *.log *.ind *.ilg \
 	*.o *.d *.asm *.sym vectors.S bootblock entryother \
 	initcode initcode.out kernel xv6.img fs.img kernelmemfs mkfs \
diff --git a/console.c b/console.c
index 35f221d..1012fb7 100644
--- a/console.c
+++ b/console.c
@@ -47,6 +47,17 @@ printint(int xx, int base, int sign)
   while(--i >= 0)
     consputc(buf[i]);
 }
+
+static void
+printlong(unsigned long long xx, int base, int sgn)
+{
+    // Force hexadecimal
+    uint upper, lower;
+    upper = xx >> 32;
+    lower = xx & 0xffffffff;
+    if(upper) printint(upper, 16, 0);
+    printint(lower, 16, 0);
+}
 //PAGEBREAK: 50
 
 // Print to the console. only understands %d, %x, %p, %s.
@@ -77,6 +88,12 @@ cprintf(char *fmt, ...)
     case 'd':
       printint(*argp++, 10, 1);
       break;
+    case 'l':
+        printlong(*(unsigned long long *)argp, 10, 0);
+        // long longs take up 2 argument slots
+        argp++;
+        argp++;
+        break;
     case 'x':
     case 'p':
       printint(*argp++, 16, 0);
diff --git a/defs.h b/defs.h
index b47372b..90561dd 100644
--- a/defs.h
+++ b/defs.h
@@ -73,6 +73,7 @@ void            kbdintr(void);
 
 // lapic.c
 void            cmostime(struct rtcdate *r);
+unsigned long   unixtime(void);
 int             cpunum(void);
 extern volatile uint*    lapic;
 void            lapiceoi(void);
diff --git a/hackbench.c b/hackbench.c
new file mode 100644
index 0000000..e33452a
--- /dev/null
+++ b/hackbench.c
@@ -0,0 +1,324 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+#include "x86.h"
+
+/* Test groups of 20 processes spraying to 20 receivers */
+//#include <stdio.h>
+//#include <string.h>
+//#include <errno.h>
+//#include <sys/types.h>
+//#include <sys/socket.h>
+//#include <sys/wait.h>
+//#include <sys/time.h>
+//#include <sys/poll.h>
+
+/* HOW TO Piping ???:
+   send:
+   1. fdout = dup(1)
+   2. close(1)
+   recv:
+   1. fdin = dup(0)
+   2. close(0)
+   pipe:
+   pipe(fdin, fdout)
+ */
+
+#define DATASIZE 100
+
+#define FREE 0
+#define POLLIN 1
+
+#define SENDER 1
+#define RECEIVER 2
+
+#define STDIN  0
+#define STDOUT 1
+#define STDERR 2
+
+#define TIMEOUT 1
+
+#define TRUE 1
+#define FALSE 0
+#define DEBUG FALSE
+
+#define NUM_FDS 8
+#define NUM_GROUPS 2
+
+static unsigned int loops = 100;
+static int use_pipes = 1; // Use Pipe mode
+//static int pollfd = 0; // 0: not used, 1: used
+//static unsigned int *pollfd[512];
+static int fd_count = 0;
+
+
+/* Data structure descripbing a polling request. */
+
+struct pollfd{
+  int fd;              /* File descriptor to poll. */
+  short int events;    /* Types of events poller cares about. */
+  short int revents;   /* Types of events that actually occurred. */
+}pollfd[512];
+
+
+
+static void barf(const char *msg)
+{
+  printf(STDOUT, "(Error: %s)\n", msg);
+  exit();
+}
+
+static void fdpair(int fds[2])
+{
+  if (use_pipes) {
+    // TODO: Implement myPipe
+    //    pipe(fds[0], fds[1]);
+    if (pipe(fds) == 0)
+      fd_count += 2;
+      return;
+  } else {
+    // This mode would not run correctly in xv6
+    //if (socketpair(AF_UNIX, SOCK_STREAM, 0, fds) == 0)
+    //  return;
+    barf("Socket mode is running. (error)\n");
+  }
+  //barf("Creating fdpair");
+}
+
+static void checkEvents(int id, int event, int caller, char *msg){
+  if(event == POLLIN){
+    if(caller == SENDER){
+      printf(STDOUT, "send[%d] is %s ... (pollfd[%d].events = POLLIN)\n", id, msg, id);
+    }else if(caller == RECEIVER){
+      printf(STDOUT, "recv[%d] is %s ... (pollfd[%d].events = POLLIN)\n", id, msg, id);
+    }else{
+      barf("checkEvents");
+    }
+  }else if(event == FREE){
+    if(caller == SENDER){
+      printf(STDOUT, "send[%d] is %s ... (pollfd[%d].events = FREE)\n", id, msg, id);
+    }else if(caller == RECEIVER){
+      printf(STDOUT, "recv[%d] is %s ... (pollfd[%d].events = FREE)\n", id, msg, id);
+    }else{
+      barf("checkEvents");
+    }
+  }else{
+    barf("checkEvents");
+  }	      
+}
+
+/* Block until we're ready to go */
+static void ready(int ready_out, int wakefd, int id, int caller)
+{
+  char dummy;
+  dummy = 'a';
+  // TODO: Implement myPoll function
+  pollfd[id].fd = wakefd;
+  if(caller == RECEIVER) pollfd[id].events = POLLIN;
+
+  /* Tell them we're ready. */
+  if (write(ready_out, &dummy, 1) != 1)
+    barf("CLIENT: ready write");
+
+  /* Wait for "GO" signal */
+  //TODO: Polling should be re-implemented for xv6.
+  //if (poll(&pollfd, 1, -1) != 1)
+  //        barf("poll");
+  if(caller == SENDER){
+    if(DEBUG) checkEvents(id, pollfd[id].events, caller, "waiting");
+    while(pollfd[id].events == POLLIN);
+    if(DEBUG) checkEvents(id, pollfd[id].events, caller, "ready");
+  }else if(caller == RECEIVER){
+    pollfd[id].events = FREE;
+    //while(getticks() < TIMEOUT);
+    if(DEBUG) checkEvents(id, pollfd[id].events, caller, "ready");
+  }else{
+    barf("Failed being ready.");
+  }
+}
+
+
+
+/* Sender sprays loops messages down each file descriptor */
+static void sender(unsigned int num_fds,
+                   unsigned int out_fd[num_fds],
+                   int ready_out,
+                   int wakefd,
+		   int id)
+{
+  char data[DATASIZE];
+  int k;
+  for(k=0; k<DATASIZE-1 ; k++){
+    data[k] = 'b';
+  }
+  data[k] = '\0';
+  
+  unsigned int i, j;
+
+  //TODO: Fix Me?
+  ready(ready_out, wakefd, id, SENDER);
+
+  /* Now pump to every receiver. */
+  for (i = 0; i < loops; i++) {
+    for (j = 0; j < num_fds; j++) {
+      int ret, done = 0;
+
+    again:
+      ret = write(out_fd[j], data + done, sizeof(data)-done);
+      if(DEBUG) printf(STDOUT, "send[%d]: ret = %d. (%d/%d/%d)\n", id, ret, i, num_fds, loops);
+      if (ret < 0)
+	barf("SENDER: write");
+      done += ret;
+      if (done < sizeof(data))
+	goto again;
+      if(DEBUG) printf(STDOUT, "send[%d]'s task has done. (%d/%d/%d)\n", id, ret, i, num_fds, loops);
+    }
+  }
+}
+
+/* One receiver per fd */
+static void receiver(unsigned int num_packets,
+                     int in_fd,
+                     int ready_out,
+                     int wakefd,
+		     int id)
+{
+  unsigned int i;
+
+  /* Wait for start... */
+  ready(ready_out, wakefd, id, RECEIVER);
+
+  /* Receive them all */
+  for (i = 0; i < num_packets; i++) {
+    char data[DATASIZE];
+    int ret, done = 0;
+
+  again:
+    ret = read(in_fd, data + done, DATASIZE - done);
+    if(DEBUG) printf(STDOUT, "recv[%d]: ret = %d. (%d/%d)\n", id, ret, i, num_packets);
+    if (ret < 0)
+      barf("SERVER: read");
+    done += ret;
+    if (done < DATASIZE){
+      goto again;
+    }
+    if(DEBUG) printf(STDOUT, "recv[%d]'s task has done. (%d/%d)\n", id, i, num_packets);
+  }
+}
+
+/* One group of senders and receivers */
+static unsigned int group(unsigned int num_fds,
+                          int ready_out,
+                          int wakefd)
+{
+  unsigned int i;
+  unsigned int out_fds[num_fds];
+
+  for (i = 0; i < num_fds; i++) {
+    int fds[2];
+
+    /* Create the pipe between client and server */
+    fdpair(fds);
+
+    /* Fork the receiver. */
+    switch (fork()) {
+    case -1: barf("fork()");
+    case 0:
+      close(fds[1]);
+      fd_count++;
+      receiver(num_fds*loops, fds[0], ready_out, wakefd, i);
+      exit();
+    }
+
+    out_fds[i] = fds[1];
+    close(fds[0]);
+  }
+
+  /* Now we have all the fds, fork the senders */
+  for (i = 0; i < num_fds; i++) {
+    switch (fork()) {
+    case -1: barf("fork()");
+    case 0:
+      fd_count += 2;
+      sender(num_fds, out_fds, ready_out, wakefd, i);
+      exit();
+    }
+  }
+
+  /* Close the fds we have left */
+  for (i = 0; i < num_fds; i++)
+    close(out_fds[i]);
+
+  /* Reap number of children to reap */
+  return num_fds * 2;
+}
+
+int main(int argc, char *argv[])
+{
+  unsigned int i, num_groups, total_children;
+  //struct timeval start, stop, diff;
+  unsigned long long start=0, stop=0, diff=0;
+  // NOTE: More than 8 causes error due to num of fds.
+  unsigned int num_fds = NUM_FDS;  // Original this is 20
+  int readyfds[2], wakefds[2];
+  char dummy;
+
+  /*
+    if (argv[1] && strcmp(argv[1], "-pipe") == 0) {
+    use_pipes = 1;
+    argc--;
+    argv++;
+    }
+  */
+  use_pipes = 1;
+  argc--;
+  argv++;
+
+  //if (argc != 2 || (num_groups = atoi(argv[1])) == 0)
+  //        barf("Usage: hackbench [-pipe] <num groups>\n");
+
+  // NOTE: More than 3 causes error due to num of processes.
+  num_groups = NUM_GROUPS; // TODO: This may seriously be considered.
+
+  fdpair(readyfds);
+  fdpair(wakefds);
+
+  total_children = 0;
+  for (i = 0; i < num_groups; i++)
+    total_children += group(num_fds, readyfds[1], wakefds[0]);
+
+  /* Wait for everyone to be ready */
+  for (i = 0; i < total_children; i++)
+    if (read(readyfds[0], &dummy, 1) != 1)
+      barf("Reading for readyfds");
+
+  //gettimeofday(&start, NULL);
+  start = rdtsc();
+  if(DEBUG) printf(STDOUT, "Start Watching Time ...\n");
+  
+
+  /* Kick them off */
+  if (write(wakefds[1], &dummy, 1) != 1)
+    barf("Writing to start them");
+
+  /* Reap them all */
+  //TODO: Fix different specifications between xv6 and Linux
+  for (i = 0; i < total_children; i++) {
+    //int status;
+    //wait(&status); // TODO: Too Many Arguments???
+    wait(); // Waiting for that all child's tasks finish.
+    // TODO: What's WIFEXITED ???
+    //if (!WIFEXITED(status))
+    //  exit();
+  }
+  
+  stop = rdtsc();
+  if(DEBUG) printf(STDOUT, "Stop Watching Time ...\n");
+  diff = stop - start;
+
+  /* Print time... */
+  printf(STDOUT, "Time: 0x%l [ticks]\n", diff);
+  if(DEBUG) printf(STDOUT, "fd_count = %d\n", fd_count);
+  exit();
+}
+
diff --git a/lapic.c b/lapic.c
index 4da4214..0d68e0e 100644
--- a/lapic.c
+++ b/lapic.c
@@ -235,3 +235,17 @@ void cmostime(struct rtcdate *r)
   *r = t1;
   r->year += 2000;
 }
+
+// This is not the "real" UNIX time as it makes many
+// simplifying assumptions -- no leap years, months
+// that are all the same length (!)
+unsigned long unixtime(void) {
+  struct rtcdate t;
+  cmostime(&t);
+  return ((t.year - 1970) * 365 * 24 * 60 * 60) +
+         (t.month * 30 * 24 * 60 * 60) +
+         (t.day * 24 * 60 * 60) +
+         (t.hour * 60 * 60) +
+         (t.minute * 60) +
+         (t.second);
+}
diff --git a/lotterytest.c b/lotterytest.c
new file mode 100644
index 0000000..1613d4f
--- /dev/null
+++ b/lotterytest.c
@@ -0,0 +1,43 @@
+#include "types.h"
+#include "user.h"
+#include "date.h"
+
+// Do some useless computations
+void spin(int tix) {
+    struct rtcdate end;
+    unsigned x = 0;
+    unsigned y = 0;
+    while (x < 100000) { // Changed from 100000
+        y = 0;
+        while (y < 10000) {
+            y++;
+        }
+        x++;
+    }
+
+    gettime(&end);
+    printf(0, "spin with %d tickets ended at %d hours %d minutes %d seconds\n", tix, end.hour, end.minute, end.second);
+}
+
+int main() {
+    int pid1;
+    int pid2;
+    struct rtcdate start;
+    gettime(&start);
+    printf(0, "starting test at %d hours %d minutes %d seconds\n", start.hour, start.minute, start.second);
+    if ((pid1 = fork()) == 0) {
+        settickets(20);
+        spin(20);
+        exit();
+    }
+    else if ((pid2 = fork()) == 0) {
+        settickets(80);
+        spin(80);
+        exit();
+    }
+    // Go to sleep and wait for subprocesses to finish
+    wait();
+    wait();
+    exit();
+    
+}
diff --git a/printf.c b/printf.c
index 9972b45..7a69654 100644
--- a/printf.c
+++ b/printf.c
@@ -35,7 +35,19 @@ printint(int fd, int xx, int base, int sgn)
     putc(fd, buf[i]);
 }
 
+static void
+printlong(int fd, unsigned long long xx, int base, int sgn)
+{
+    // Force hexadecimal
+    uint upper, lower;
+    upper = xx >> 32;
+    lower = xx & 0xffffffff;
+    if(upper) printint(fd, upper, 16, 0);
+    printint(fd, lower, 16, 0);
+}
+
 // Print to the given fd. Only understands %d, %x, %p, %s.
+// bdg 10/05/2015: Add %l
 void
 printf(int fd, char *fmt, ...)
 {
@@ -57,6 +69,11 @@ printf(int fd, char *fmt, ...)
       if(c == 'd'){
         printint(fd, *ap, 10, 1);
         ap++;
+      } else if(c == 'l') {
+        printlong(fd, *(unsigned long long *)ap, 10, 0);
+        // long longs take up 2 argument slots
+        ap++;
+        ap++;
       } else if(c == 'x' || c == 'p'){
         printint(fd, *ap, 16, 0);
         ap++;
diff --git a/proc.c b/proc.c
index fee4e95..1301a99 100644
--- a/proc.c
+++ b/proc.c
@@ -6,6 +6,7 @@
 #include "x86.h"
 #include "proc.h"
 #include "spinlock.h"
+#include "rand.h"
 
 struct {
   struct spinlock lock;
@@ -24,6 +25,8 @@ void
 pinit(void)
 {
   initlock(&ptable.lock, "ptable");
+  // Seed RNG with current time
+  sgenrand(unixtime());
 }
 
 //PAGEBREAK: 32
@@ -55,11 +58,11 @@ found:
     return 0;
   }
   sp = p->kstack + KSTACKSIZE;
-  
+
   // Leave room for trap frame.
   sp -= sizeof *p->tf;
   p->tf = (struct trapframe*)sp;
-  
+
   // Set up new context to start executing at forkret,
   // which returns to trapret.
   sp -= 4;
@@ -80,7 +83,7 @@ userinit(void)
 {
   struct proc *p;
   extern char _binary_initcode_start[], _binary_initcode_size[];
-  
+
   p = allocproc();
   initproc = p;
   if((p->pgdir = setupkvm()) == 0)
@@ -108,7 +111,7 @@ int
 growproc(int n)
 {
   uint sz;
-  
+
   sz = proc->sz;
   if(n > 0){
     if((sz = allocuvm(proc->pgdir, sz, sz + n)) == 0)
@@ -155,14 +158,14 @@ fork(void)
   np->cwd = idup(proc->cwd);
 
   safestrcpy(np->name, proc->name, sizeof(proc->name));
- 
+
   pid = np->pid;
 
   // lock to force the compiler to emit the np->state write last.
   acquire(&ptable.lock);
   np->state = RUNNABLE;
   release(&ptable.lock);
-  
+
   return pid;
 }
 
@@ -268,19 +271,53 @@ scheduler(void)
   struct proc *p;
   int foundproc = 1;
 
+  long total_tickets = 0;
+  long counter = 0;
+  long winner;
+
+  int got_total = 0; // 0 is False, 1 is True
+  int winner_found = 0;
+
   for(;;){
     // Enable interrupts on this processor.
+
     sti();
 
     if (!foundproc) hlt();
-
-    foundproc = 0;
+    if (got_total == 1) {
+         foundproc = 0;
+         winner = random_at_most(total_tickets);
+         total_tickets = 0;
+         counter = 0;
+         winner_found = 0;
+    }
 
     // Loop over process table looking for process to run.
     acquire(&ptable.lock);
     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-      if(p->state != RUNNABLE)
-        continue;
+
+      if(p->state != RUNNABLE) {
+            continue;
+      }
+      // Or first time running the loop. Must find total tickets
+      // Continue to prevent process from being ran because it's not fair
+      if (got_total == 0) {
+            total_tickets += p->tickets;
+            continue;
+      }
+
+      counter += p->tickets;
+
+      if (counter < winner) {
+            // Runnable but not winner. State doesn't change. Tickets valid for next round
+            total_tickets += p->tickets;
+            continue;
+      }
+
+      if (winner_found) {
+            total_tickets += p->tickets;
+            continue;
+      }
 
       // Switch to chosen process.  It is the process's job
       // to release ptable.lock and then reacquire it
@@ -294,9 +331,18 @@ scheduler(void)
 
       // Process is done running for now.
       // It should have changed its p->state before coming back.
+
+      //If it's still runnable, it it should be added to total tickets
+      if (p->state == RUNNABLE) {
+            total_tickets += p->tickets;
+
+      winner_found = 1;
+
+      }
       proc = 0;
     }
     release(&ptable.lock);
+    got_total = 1;
 
   }
 }
@@ -342,13 +388,13 @@ forkret(void)
 
   if (first) {
     // Some initialization functions must be run in the context
-    // of a regular process (e.g., they call sleep), and thus cannot 
+    // of a regular process (e.g., they call sleep), and thus cannot
     // be run from main().
     first = 0;
     iinit(ROOTDEV);
     initlog(ROOTDEV);
   }
-  
+
   // Return to "caller", actually trapret (see allocproc).
 }
 
@@ -453,7 +499,7 @@ procdump(void)
   struct proc *p;
   char *state;
   uint pc[10];
-  
+
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
     if(p->state == UNUSED)
       continue;
@@ -467,6 +513,9 @@ procdump(void)
       for(i=0; i<10 && pc[i] != 0; i++)
         cprintf(" %p", pc[i]);
     }
+    // cprintf(" %d", p->tickets);
+    // cprintf(" %d", winning_ticket);
+    // cprintf(" %d", total_tickets);
     cprintf("\n");
   }
 }
diff --git a/proc.h b/proc.h
index 3b9c3ac..bdeb9cf 100644
--- a/proc.h
+++ b/proc.h
@@ -10,7 +10,7 @@ struct cpu {
   volatile uint started;       // Has the CPU started?
   int ncli;                    // Depth of pushcli nesting.
   int intena;                  // Were interrupts enabled before pushcli?
-  
+
   // Cpu-local storage variables; see below
   struct cpu *cpu;
   struct proc *proc;           // The currently-running process.
@@ -66,6 +66,8 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+
+  int tickets;            // Homework 4 addition.
 };
 
 // Process memory is laid out contiguously, low addresses first:
diff --git a/rand.c b/rand.c
new file mode 100644
index 0000000..b4b33b7
--- /dev/null
+++ b/rand.c
@@ -0,0 +1,120 @@
+/* A C-program for MT19937: Real number version                */
+/*   genrand() generates one pseudorandom real number (double) */
+/* which is uniformly distributed on [0,1]-interval, for each  */
+/* call. sgenrand(seed) set initial values to the working area */
+/* of 624 words. Before genrand(), sgenrand(seed) must be      */
+/* called once. (seed is any 32-bit integer except for 0).     */
+/* Integer generator is obtained by modifying two lines.       */
+/*   Coded by Takuji Nishimura, considering the suggestions by */
+/* Topher Cooper and Marc Rieffel in July-Aug. 1997.           */
+
+/* This library is free software; you can redistribute it and/or   */
+/* modify it under the terms of the GNU Library General Public     */
+/* License as published by the Free Software Foundation; either    */
+/* version 2 of the License, or (at your option) any later         */
+/* version.                                                        */
+/* This library is distributed in the hope that it will be useful, */
+/* but WITHOUT ANY WARRANTY; without even the implied warranty of  */
+/* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.            */
+/* See the GNU Library General Public License for more details.    */
+/* You should have received a copy of the GNU Library General      */
+/* Public License along with this library; if not, write to the    */
+/* Free Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA   */ 
+/* 02111-1307  USA                                                 */
+
+/* Copyright (C) 1997 Makoto Matsumoto and Takuji Nishimura.       */
+/* Any feedback is very welcome. For any question, comments,       */
+/* see http://www.math.keio.ac.jp/matumoto/emt.html or email       */
+/* matumoto@math.keio.ac.jp                                        */
+
+/* Period parameters */  
+#define N 624
+#define M 397
+#define MATRIX_A 0x9908b0df   /* constant vector a */
+#define UPPER_MASK 0x80000000 /* most significant w-r bits */
+#define LOWER_MASK 0x7fffffff /* least significant r bits */
+
+/* Tempering parameters */   
+#define TEMPERING_MASK_B 0x9d2c5680
+#define TEMPERING_MASK_C 0xefc60000
+#define TEMPERING_SHIFT_U(y)  (y >> 11)
+#define TEMPERING_SHIFT_S(y)  (y << 7)
+#define TEMPERING_SHIFT_T(y)  (y << 15)
+#define TEMPERING_SHIFT_L(y)  (y >> 18)
+
+#define RAND_MAX 0x7fffffff
+
+static unsigned long mt[N]; /* the array for the state vector  */
+static int mti=N+1; /* mti==N+1 means mt[N] is not initialized */
+
+/* initializing the array with a NONZERO seed */
+void
+sgenrand(unsigned long seed)
+{
+    /* setting initial seeds to mt[N] using         */
+    /* the generator Line 25 of Table 1 in          */
+    /* [KNUTH 1981, The Art of Computer Programming */
+    /*    Vol. 2 (2nd Ed.), pp102]                  */
+    mt[0]= seed & 0xffffffff;
+    for (mti=1; mti<N; mti++)
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+}
+
+long /* for integer generation */
+genrand()
+{
+    unsigned long y;
+    static unsigned long mag01[2]={0x0, MATRIX_A};
+    /* mag01[x] = x * MATRIX_A  for x=0,1 */
+
+    if (mti >= N) { /* generate N words at one time */
+        int kk;
+
+        if (mti == N+1)   /* if sgenrand() has not been called, */
+            sgenrand(4357); /* a default initial seed is used   */
+
+        for (kk=0;kk<N-M;kk++) {
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+            mt[kk] = mt[kk+M] ^ (y >> 1) ^ mag01[y & 0x1];
+        }
+        for (;kk<N-1;kk++) {
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+            mt[kk] = mt[kk+(M-N)] ^ (y >> 1) ^ mag01[y & 0x1];
+        }
+        y = (mt[N-1]&UPPER_MASK)|(mt[0]&LOWER_MASK);
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+
+        mti = 0;
+    }
+  
+    y = mt[mti++];
+    y ^= TEMPERING_SHIFT_U(y);
+    y ^= TEMPERING_SHIFT_S(y) & TEMPERING_MASK_B;
+    y ^= TEMPERING_SHIFT_T(y) & TEMPERING_MASK_C;
+    y ^= TEMPERING_SHIFT_L(y);
+
+    // Strip off uppermost bit because we want a long,
+    // not an unsigned long
+    return y & RAND_MAX;
+}
+
+// Assumes 0 <= max <= RAND_MAX
+// Returns in the half-open interval [0, max]
+long random_at_most(long max) {
+  unsigned long
+    // max <= RAND_MAX < ULONG_MAX, so this is okay.
+    num_bins = (unsigned long) max + 1,
+    num_rand = (unsigned long) RAND_MAX + 1,
+    bin_size = num_rand / num_bins,
+    defect   = num_rand % num_bins;
+
+  long x;
+  do {
+   x = genrand();
+  }
+  // This is carefully written not to overflow
+  while (num_rand - defect <= (unsigned long)x);
+
+  // Truncated division is intentional
+  return x/bin_size;
+}
diff --git a/rand.h b/rand.h
new file mode 100644
index 0000000..01affcb
--- /dev/null
+++ b/rand.h
@@ -0,0 +1,3 @@
+void sgenrand(unsigned long);
+long genrand(void);
+long random_at_most(long);
diff --git a/syscall.c b/syscall.c
index 799ebc2..59d04ed 100644
--- a/syscall.c
+++ b/syscall.c
@@ -55,7 +55,7 @@ int
 argptr(int n, char **pp, int size)
 {
   int i;
-  
+
   if(argint(n, &i) < 0)
     return -1;
   if((uint)i >= proc->sz || (uint)i+size > proc->sz)
@@ -98,6 +98,8 @@ extern int sys_unlink(void);
 extern int sys_wait(void);
 extern int sys_write(void);
 extern int sys_uptime(void);
+extern int sys_gettime(void);
+extern int sys_settickets(void);
 
 static int (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -121,6 +123,8 @@ static int (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_gettime] sys_gettime,
+[SYS_settickets] sys_settickets,
 };
 
 void
diff --git a/syscall.h b/syscall.h
index bc5f356..e59bc4a 100644
--- a/syscall.h
+++ b/syscall.h
@@ -20,3 +20,5 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_gettime 22
+#define SYS_settickets 23
diff --git a/sysproc.c b/sysproc.c
index 027a5e5..057d0a2 100644
--- a/sysproc.c
+++ b/sysproc.c
@@ -61,7 +61,7 @@ sys_sleep(void)
 {
   int n;
   uint ticks0;
-  
+
   if(argint(0, &n) < 0)
     return -1;
   acquire(&tickslock);
@@ -83,9 +83,30 @@ int
 sys_uptime(void)
 {
   uint xticks;
-  
+
   acquire(&tickslock);
   xticks = ticks;
   release(&tickslock);
   return xticks;
 }
+
+int
+sys_gettime(void) {
+  struct rtcdate *d;
+  if (argptr(0, (char **)&d, sizeof(struct rtcdate)) < 0)
+      return -1;
+  cmostime(d);
+  return 0;
+}
+
+int
+sys_settickets(void) {
+      int n;
+      if(argint(0, &n) < 0) {
+            proc->tickets = 10;
+      }
+      else {
+            proc->tickets = n;
+      }
+      return 0;
+}
diff --git a/user.h b/user.h
index f45b8d5..58e344c 100644
--- a/user.h
+++ b/user.h
@@ -23,6 +23,8 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int gettime(struct rtcdate *);
+int settickets(int);
 
 // ulib.c
 int stat(char*, struct stat*);
diff --git a/usys.S b/usys.S
index 8bfd8a1..27646a9 100644
--- a/usys.S
+++ b/usys.S
@@ -29,3 +29,5 @@ SYSCALL(getpid)
 SYSCALL(sbrk)
 SYSCALL(sleep)
 SYSCALL(uptime)
+SYSCALL(gettime)
+SYSCALL(settickets)
diff --git a/x86.h b/x86.h
index 7d14145..6a5bba3 100644
--- a/x86.h
+++ b/x86.h
@@ -123,6 +123,13 @@ hlt(void)
   asm volatile("hlt");
 }
 
+static inline unsigned long long rdtsc(void)
+{
+    unsigned long long ret;
+    asm volatile ( "rdtsc" : "=A"(ret) );
+    return ret;
+}
+
 static inline uint
 xchg(volatile uint *addr, uint newval)
 {
-- 
1.9.1

